Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук
Кафедра програмної інженерії




ЗВІТ
до практичного заняття №1 з дисципліни
“Архітектура програмного забезпечення”




Виконав:
ст. гр. ПЗПІ-22-6 
Білецький Д.А.
Перевірив:
ст. викладач кат. ПІ
Сокорчук І.П.



Харків 2025

1.	ІСТОРІЯ ЗМІН
Таблиця 1.1 Історія змін
№	Дата	Версія звіту	Опис змін
1	27.04.2025	0.1	Створені основні розділи звіту
2	27.04.2025	0.2	Додано посилання на YouTube

2.	ЗАВДАННЯ
Підготувати доповідь на тему: «Шаблон (патерн) проєктування ПЗ»
Створити та оформити слайди презентації доповіді
Створити та опублікувати на YouTube відеозапис доповіді
Оформити та завантажити на dl.nure.ua звіт до виконаної роботи
При потребі створити та налаштувати у GitHub обліковий запис для облікового запису студента в домені @nure.ua
Створити для виконання завдань з дисципліни GitHub репозиторій iз вказаним на https://dl.nure.ua іменем та з головною гілкою main
Створити у корені створеного репозиторію файл README.md з вказаним далі змістом та вказані далі директорії для окремих завдань
Експортувати звіт у файл у простому текстововому форматі та завантажити цей файл у директорію Pract1 у репозиторії GitHub
Завантажити у вказану далі піддиректорію увесь програмний код, який розглядається у доповіді ПЗ1ОПИС ВИКОНАНОЇ РОБОТИ
Документ Vision & Scope оновлений та підготовлений згідно з вимогам, та наведений у Додатку Б.

3.	ОПИС ВИКОНАНОЇ РОБОТИ
Шаблон проектування «Будівельник» - це шаблон категорії створення, котрий використовується в розробці програмного забезпечення для покрокової побудови складного об’єкта.
Основна ціль – відокремити процес побудови складного об’єкта від його представлення, щоб один і той самий процес можна було використовувати для створення різних варіацій об’єкта.

Складові шаблону проектування «Будівельник»
Builder (Будівельник) – інтерфейс або абстрактний клас, який визначає кроки для створення об’єкта.
Concrete Builder (Конкретний будівельник) – клас, котрий реалізує кроки й фактично створює об’єкт.
Director (Директор) – допоміжний клас, котрий знає в якій послідовності викликати кроки, щоб зібрати конкретний варіант об’єкта.
Product (Продукт) – це сам об’єкт, який будується.
Client (Клієнт) – це той, хто ініціює побудову об’єкта, тобто викликає Директора або напряму Будівельника, щоб отримати готовий продукт.

Приклад шаблону «Будівельник» у реальному житті
Будівництво будинку:
Спочатку заливають фундамент → зводять стіни → ставлять дах → фарбують.
Відповідальність:
Будівельник визначає які саме частини ми можемо будувати.
Конкретний будівельник реалізує, як саме заливається фундамент чи ставиться дах.
Директор замовляє певний будинок, який необхідний клієнту.
Продукт – це готовий будинок.

Переваги та недоліки шаблону «Будівельник»
Переваги:
-	Контроль створення: можна будувати об’єкт поступово, крок за кроком, визначаючи етапи побудови.
-	Гнучкість: можна легко створювати різні варіації об’єкта, змінюючи порядок або набір кроків.
-	Чистота коду: дозволяє уникати громіздких конструкторів з великою кількістю параметрів.
Недоліки:
-	Ускладнення структури: потрібно створювати багато додаткових класів (Будівельник, Конкретний Будівельник, Директор).
-	Надмірність: може бути зайвим у простих об’єктах, де достатньо одного конструктора.
-	Витрати часу: проектування логіки побудови може займати більше часу, ніж просте створення об’єкта.

4.	ВИСНОВКИ
Під час виконання практичного завдання нами був розглянутий шаблон проектування «Будівельник». Ми визначили його особливості, використання, а також розглянули його переваги та недоліки.


ДОДАТОК А

Відеозапис доповіді на Youtube: https://youtu.be/rVpxUmOeHmQ

Хронологічний опис відео:
0:00 - Вступ
0:16 - Що таке "Будівельник" як шаблон проектування
0:45 - Складові шаблону проектування "Будівельник"
1:34 - Приклад шаблону "Будівельник" у реальному житті
2:09 - Переваги та недоліки шаблону "Будівельник"
3:04 - Коли слід використовувати шаблон проектування "Будівельник"
3:23 - Приклад коду шаблону проектування "Будівельник". Product(Продукт)
3:46 - Приклад коду шаблону проектування "Будівельник". Builder(Будівельник)
4:17 - Приклад коду шаблону проектування "Будівельник". ConcreteBuilder(Конкретний будівельник)
5:00 - Приклад коду шаблону проектування "Будівельник". Director(Директор)
5:35 - Приклад коду шаблону проектування "Будівельник". Client(Клієнт)


ДОДАТОК Б
 
Рисунок Б.1 – Титульний слайд
 
Рисунок Б.2 – Що таке «Будівельник» як шаблон проектування
 
 
Рисунок Б.3 – Складові шаблону проектування «Будівельник»
 
Рисунок Б.4 – Приклад шаблону «Будівельник» у реальному житті
 
 
Рисунок Б.5 – Переваги та недоліки шаблону «Будівельник
 
Рисунок Б.6 – Коли слід використовувати шаблон проектування «Будівельник»


Рисунок Б.7 – Приклад коду шаблону проектування «Будівельник». Product(Продукт)
 
Рисунок Б.8 – Приклад коду шаблону проектування «Будівельник». Builder (Будівельник)


Рисунок Б.9 – Приклад коду шаблону проектування «Будівельник». ConcreteBuilder(Конкретний будівельник)
 
Рисунок Б.10 – Приклад коду шаблону проектування «Будівельник». Director(Директор)


Рисунок Б.11 – Приклад коду шаблону проектування «Будівельник». Client(Клієнт)


ДОДАТОК В

Приклад коду реалізації шаблону проектування «Будівельник» мовою програмування C#.
Посилання на Github репозиторій: https://github.com/NureBiletskyiDanylo/apz-pzpi-22-6-biletskyi-danylo/tree/main/Pract1

1. // Car - образ продукта який ми маємо отримати
2. public class Car
3. {
4.     public string Engine { get; set; }
5.     public string Wheels { get; set; }
6.     public string Body { get; set; }
7.     public void ShowSpecifications()
8.     {
9.         Console.WriteLine($"Engine: {Engine}");
10.         Console.WriteLine($"Wheels: {Wheels}");
11.         Console.WriteLine($"Body: {Body}");
12.     }
13. }
14. 
15. // ICarBuilder - будівельник, інтерфейс що визначає кроки для побудови продукту
16. public interface ICarBuilder
17. {
18.     void BuildEngine();
19.     void BuildWheels();
20.     void BuildBody();
21.     Car GetCar();
22. }
23. 
24. // JeepBuilder - конкретна реалізація кроків
25. // побудови продукту, в даному випадку джип
26. public class JeepBuilder : ICarBuilder
27. {
28.     private Car _car = new Car();
29.     public void BuildBody()
30.     {
31.         _car.Engine = "Diesel engine";
32.     }
33. 
34.     public void BuildEngine()
35.     {
36.         _car.Wheels = "All-Terrain wheels";
37.     }
38. 
39.     public void BuildWheels()
40.     {
41.         _car.Body = "Durable jeep body";
42.     }
43. 
44.     public Car GetCar()
45.     {
46.         return _car;
47.     }
48. }
49. 
50. // SportsCarBuilder - інша конкретна реалізація
51. // кроків побудови продукту, тепер спорткар
52. public class SportsCarBuilder : ICarBuilder
53. {
54.     private Car _car = new Car();
55.     public void BuildEngine()
56.     {
57.         _car.Engine = "V8 Engine";
58.     }
59. 
60.     public void BuildWheels()
61.     {
62.         _car.Wheels = "Sport wheels";
63.     }
64. 
65.     public void BuildBody()
66.     {
67.         _car.Body = "Aerodynamic body";
68.     }
69. 
70.     public Car GetCar()
71.     {
72.         return _car;
73.     }
74. }
75. 
76. // Director - керівник, котрий визначає
77. // в якій саме послідовності викликати кроки побудови так
78. // аби зібрати машину
79. public class Director
80. {
81.     private ICarBuilder _builder;
82.     public Director(ICarBuilder builder)
83.     {
84.         _builder = builder;
85.     }
86. 
87.     public void ConstructCar()
88.     {
89.         _builder.BuildEngine();
90.         _builder.BuildWheels();
91.         _builder.BuildBody();
92.     }
93. }
94. 
95. // Клієнт, котрий замовляє продукт, котрий йому необхідний
96. class Program
97. {
98.     static void Main()
99.     {
100.         // Замовлення спортивної машини
101.         ICarBuilder sportsCarBuilder = new SportsCarBuilder();
102.         Director director = new Director(sportsCarBuilder);
103. 
104.         director.ConstructCar();
105.         Car sportsCar = sportsCarBuilder.GetCar();
106.         sportsCar.ShowSpecifications();
107. 
108.         // Замовлення джипу
109.         ICarBuilder jeepBuilder = new JeepBuilder();
110.         director = new Director(jeepBuilder);
111.         director.ConstructCar();
112.         Car jeep = jeepBuilder.GetCar();
113.         jeep.ShowSpecifications();
114.     }
115. }

